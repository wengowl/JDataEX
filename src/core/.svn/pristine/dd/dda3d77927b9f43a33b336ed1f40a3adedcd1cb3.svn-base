package org.jdataex.flow.component.step.dataaccess;

import org.jdataex.flow.row.*;
import org.jdataex.resource.databasepool.BasePoolConnection;
import org.jdataex.resource.databasepool.DBManager;
import org.jdataex.util.logger.LoggerFactory;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;
import java.text.SimpleDateFormat;


/**
 * Created by wengxf on 2014/5/30 0030.
 */
public class RowDataAccess extends RowDataAccessProcess {
    DBManager dbManager = DBManager.getInstance();
    private SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    //private java.sql.Timestamp date=java.sql.Timestamp.valueOf(formatter.format(new Timestamp(System.currentTimeMillis())));

    public void doProcessRow(IRow row) {
        System.out.println("******************************************************************");
        System.out.println("Start process "+row.getHeader().toString()+""+row.getHeader().containsValue("insert"));
       // IRowHeader header= new RowHeader();
        // header.put("actionType","insert") ;
       // row.setHeader(header);
          for (int i=0; i<row.getColumnsSize();i++){
              System.out.println(row.getColumn(i).getName());
          }
        if (row.getHeader().get("ACTION_TYPE").equalsIgnoreCase("insert")) {
            LoggerFactory.getRootLogger().info("do ******** insert");
                doInsert(row);
        }else if (row.getHeader().get("ACTION_TYPE").equalsIgnoreCase("delete"))
        {    LoggerFactory.getRootLogger().info("do ******** delete");
            doDelete(row);
        }


    }

    public void doInsert(IRow row) {

        BasePoolConnection basePoolConnection = dbManager.getConnection(null);
        try {
            basePoolConnection.setAutoCommit(false);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        int n = 0;
        boolean flag = true;
        PreparedStatement preparedStatement=null;
        String failtext = "0 rows has changed";
        try {
        for (int i = 0; i < row.getColumnsSize(); i++) {
            System.out.println("row.getvalue:"+row.getColumn(i).getValue());
            if (row.getColumn(i).getType().equals(ColumnType.ComplexRow)) {
                IRow nrow = (IRow) row.getColumn(i).getValue();
                nrow.insertColumn("APP_CODE",row.getHeader().get("APP_CODE"));
                nrow.insertColumn("DEPT_CODE",row.getHeader().get("DEPT_CODE"));
//                nrow.insertColumn("ID",UUID.randomUUID().toString());
//               // nrow.insertColumn("REG_TIME",date);
//                //nrow.insertColumn("UPDATE_TIME",date);
//                nrow.insertColumn("REG_TIME",formatter.format(new Timestamp(System.currentTimeMillis())));
//                nrow.insertColumn("UPDATE_TIME",formatter.format(new Timestamp(System.currentTimeMillis())));
                Savepoint savepoint = null;
               try {
                   savepoint = basePoolConnection.setSavepoint();
                   n=updateProcess(basePoolConnection,nrow);
                    System.out.println("update rows :"+n);
             } catch (SQLException e) {
                    //flag = false;
                   n=0;
                   LoggerFactory.getRootLogger().error(e.getMessage(),e);
                   // e.printStackTrace();
                    try {
                        System.out.println("roll back savepoint");
                        basePoolConnection.rollback(savepoint);
                       // basePoolConnection.commit();

                    } catch (SQLException e1) {
                        e1.printStackTrace();
                    }

                }
                if (n == 0) {
                   n = insertProcess(basePoolConnection, nrow);
                }
            } else if (row.getColumn(i).getType().equals(ColumnType.ComplexRowSet)) {
                IRowSet rowSet = (IRowSet) row.getColumn(i).getValue();
                while (rowSet.hasNextRow()) {
                    IRow row1 = rowSet.nextRow();
                  //  try {
                    row1.insertColumn("APP_CODE",row.getHeader().get("APP_CODE"));
                    row1.insertColumn("DEPT_CODE",row.getHeader().get("DEPT_CODE"));
                   /* row1.insertColumn("ID", UUID.randomUUID());
                    row1.insertColumn("REG_TIME",new Timestamp(System.currentTimeMillis()));
                    row1.insertColumn("UPDATE_TIME",new Timestamp(System.currentTimeMillis()));*/
                    Savepoint savepoint = null;
                    try {
                      savepoint = basePoolConnection.setSavepoint();
                        n=updateProcess(basePoolConnection,row1);

                    } catch (SQLException e) {
                      //  flag = false;
                        n=0;
                        LoggerFactory.getRootLogger().error(e.getMessage(),e);
                       // e.printStackTrace();
                        try {
                            System.out.println("roll back savepoint");
                            basePoolConnection.rollback(savepoint);
                          //  basePoolConnection.commit();
                        } catch (SQLException e1) {
                            e1.printStackTrace();
                        }

                    }
                    if (n == 0) {
                        n = insertProcess(basePoolConnection,row1);
                    }
                }
            }
        }

            basePoolConnection.commit();
        } catch (SQLException e) {
            flag=false;
             failtext= e.getMessage();
            try {
                System.out.println("roll back all");
                basePoolConnection.rollback();
                //basePoolConnection.commit();

            } catch (SQLException e1) {
                //e1.printStackTrace();
                LoggerFactory.getRootLogger().error(e1.getMessage(),e1);
            }
           // e.printStackTrace();
            LoggerFactory.getRootLogger().error(e.getMessage(),e);
        } finally {
            basePoolConnection.release();
            try {
                basePoolConnection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        if (!flag) {
            if (n==0){
             failtext = "0 rows has  changed";
            }
            System.out.println("flag:"+flag );
            try {
                basePoolConnection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        try {

        } finally {
            basePoolConnection.release();
            try {
                basePoolConnection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }


    public void doDelete(IRow row){
        BasePoolConnection basePoolConnection = dbManager.getConnection(null);
        try {
            basePoolConnection.setAutoCommit(false);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        int n = 0;
        boolean flag = true;
        String failtext = "0 rows has changed";
        PreparedStatement preparedStatement=null;
        try {
            for (int i = 0; i < row.getColumnsSize(); i++) {
                if (row.getColumn(i).getType().equals(ColumnType.ComplexRow)) {
                    IRow nrow = (IRow) row.getColumn(i).getValue();

//                try {
                    n = deleteProcess(basePoolConnection, nrow);
                    if (n == 0) {
                        flag = false;
                    }
/*//                } catch (SQLException e) {
                    flag = false;
                    e.printStackTrace();
                    try {
                        basePoolConnection.rollback();
                    } catch (SQLException e1) {
                        e1.printStackTrace();
                    }

                }*/
                } else if (row.getColumn(i).getType().equals(ColumnType.ComplexRowSet)) {
                    IRowSet rowSet = (IRowSet) row.getColumn(i).getValue();
                    while (rowSet.hasNextRow()) {
                        IRow row1 = rowSet.nextRow();
                        //  try {
                        n = deleteProcess(basePoolConnection, row1);
                        if (n == 0) {
                            flag = false;
                        }
                  /*  } catch (SQLException e) {
                        flag = false;
                        e.printStackTrace();
                        try {
                            basePoolConnection.rollback();
                        } catch (SQLException e1) {
                            e1.printStackTrace();
                        }

                    }*/
                    }
                }
            }

            basePoolConnection.commit();
        } catch (SQLException e) {
            flag=false;
            try {
                basePoolConnection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
            failtext=e.getMessage();
            e.printStackTrace();
        }
        finally {
            basePoolConnection.release();
            try {
                basePoolConnection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        if (!flag) {

            System.out.println("flag:"+flag );
            try {
                basePoolConnection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }
        if (n==0){
            LoggerFactory.getRootLogger().warn("delete 0 row!!!!");
        }

        try {

        } finally {
            basePoolConnection.release();
            try {
                basePoolConnection.setAutoCommit(true);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

}