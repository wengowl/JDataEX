package org.jdataex.flow.component.dataaccess;

import org.jdataex.flow.row.*;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by wengxf on 14-4-30.
 * 自动入库 (处理含有一对多，一对一等表对应关系要修改外键字段)
 * 插入操作 -- 先插入主表，后插入从表；
 * 修改操作 -- 先插入主表正确的外键字段记录，后修改从表的外键, 并删除主表错误的外键字段记录；
 * 删除操作 -- 先删除从表，后删除主表。
 */
public class ComplexAutoDataAccess extends ComplexDataAccessProcess {
    private boolean flag =true;
    /**
     * 处理集合
     */
    public void processComplexRowset(RowSet rowSet) {
        IRow row = new Row();
        while ((row = rowSet.nextRow()) != null) {
            processComplexRow(row);
        }
    }
    /*public void processRowset(RowSet rowSet) {
        IRow row = new Row();
        while ((row = rowSet.nextRow()) != null) {
            processRow(row);
        }
    }*/
        /**
         * 处理单条记录
         */

     public void processComplexRow(IRow row){
         List<IRow> rows = new ArrayList<>();
         List<RowSet> rowsets = new ArrayList<>();
         for (int i=0;i<row.getColumnsSize();i++){
             IColumn column = row.getColumn(i);
//             判断是否含有对应关系的字段
             if (column.getType().equals(ColumnType.ComplexRow)) //该字段一对一关系 getName().equals("ComplexRow")
             {
                 rows.add((IRow)row.getColumn(i).getValue());  //添加到列表
                 row.getColumn(i).setType((ColumnType)column.getProperty("type"));  //设置该字段真实在该表中的类型
                 row.getColumn(i).setValue(column.getProperty("value"));  //设置该字段真实在该表中的值

             }
             if(column.getType().equals(ColumnType.ComplexRowSet)){  //该字段一对多关系   .getName().equals("ComplexRowSet")
                 rowsets.add((RowSet)row.getColumn(i).getValue());
                 row.getColumn(i).setType((ColumnType)column.getProperty("type"));
                 row.getColumn(i).setValue(column.getProperty("value"));

             }
         }

         String operationtype = row.getHeader().get("operation");
         if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_INSERT)) {

//         插入，先插主表，再插从表
             insert(row);
             for (int i=0;i<rows.size();i++){
                 insert(rows.get(i));
             }
             for (int i=0;i<rowsets.size();i++){
                      IRow nrow = new Row();
                 while ((nrow =rowsets.get(i).nextRow()) != null) {
                       insert(nrow);
                 }
             }
         }
         if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_UPDATE)) {
//          更新，若没有对应关系，则直接更新操作，若有，则先插入主表，更新从表，再删除主表原有字段（此处的refrencekey，必须为外键需要更改的值）

             if (rows.size()==0&&rowsets.size()==0) {
                 update(row);
             }
             else{
                 insert(row);
                 for (int i=0;i<rows.size();i++){
                     update(rows.get(i));
                 }
                 for (int i=0;i<rowsets.size();i++){
                     IRow nrow = new Row();
                     while ((nrow =rowsets.get(i).nextRow()) != null) {
                       update(nrow);
                     }
                 }
                 deleteInupdate(row);
             }
             if (!flag){
                 delete(row);
             }

         }
         if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_DELETE)) {
             for (int i=0;i<rows.size();i++){
                 delete(rows.get(i));
             }
             for (int i=0;i<rowsets.size();i++){
                 IRow nrow = new Row();
                 while ((nrow =rowsets.get(i).nextRow()) != null) {
                     delete(nrow);
                 }
             }
             delete(row);
         }
     }


   /* *//**
     * 处理单条记录
     *//*
    public void processRow(IRow row) {
        String operationtype = row.getHeader().get("operation");

        if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_INSERT)) {
            insert(row);
        }
        if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_UPDATE)) {
            update(row);
        }
        if (operationtype.equalsIgnoreCase(MsgCacheBean.OPERATION_TYPE_DELETE)) {
            delete(row);
        }
    }

    */
     /*/**
     * 批处理
     *
     * @param rowSet 中每个row的格式必须得相同
     * @return 批的处理结果
     */
    /*
    public int[] batchProcess(RowSet rowSet) {
        IRow row = new Row();
        int i[] = new int[rowSet.size()];
        DBManager dbManager = new DBManager();
        BasePoolConnection connection = dbManager.getConnection(row.getHeader().get("database"));
        try {
            connection.setAutoCommit(false);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        String sql = getSQL(rowSet.getRow(0));
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = connection.prepareStatement(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        while ((row = rowSet.nextRow()) != null) {
            try {
                preparedStatement = preparedStatement(preparedStatement, row);
                preparedStatement.addBatch();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        try {
            i = preparedStatement.executeBatch();
            connection.commit();
        } catch (SQLException e) {
            e.printStackTrace();
            try {
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        } finally {
            try {
                preparedStatement.close();
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }

        }
        return i;
    }
*/
    public void insert(IRow row) {
        int i = 0;
        String failedtxt = "0条记录受到影响";
        /*try {
            i = updateProcess(row);
            System.out.println("update " + i + " rows");
        } catch (SQLException e2) {
            e2.printStackTrace();
        }*/

        if (i == 0) {
            System.out.println("开始插入");
            try {
                i = insertProcess(row);
                System.out.println(i + "has changed");
            } catch (SQLException e1) {
                e1.printStackTrace();
                i = 0;

                failedtxt = e1.getMessage();
            }
        }
        if (i == 0) {
            flag=false;
            //入库失败插入缓存表，以备重新入库 ，暂不实现
            // insertMsgCacheProcess(row,failedtxt,MsgCacheBean.OPERATION_TYPE_INUP) ;
        }
    }

    public void update(IRow row) {
        int i = 0;
        String failedtxt = "0条记录受到影响";
       /* try {
            i = insertProcess(row);
        } catch (SQLException e2) {
            e2.printStackTrace();
        }*/

        if (i == 0) {
            try {
                i = updateProcess(row);
            } catch (SQLException e1) {
//                e1.printStackTrace();
                i = 0;
                failedtxt = e1.getMessage();
            }
        }
        if (i == 0) {
            flag=false;
            //入库失败插入缓存表，以备重新入库
            //insertMsgCacheProcess(row,failedtxt,MsgCacheBean.OPERATION_TYPE_UPIN) ;
        }
    }
    public void deleteInupdate(IRow row) {
        int i = 0;
        String failedtxt = "0条记录受到影响";
        try {
            i = deleteProcessInUpdate(row);
        } catch (SQLException e) {
            // e.printStackTrace();
            i = 0;
            failedtxt = e.getMessage();

        }

        if (i == 0) {
            flag=false;
            //入库失败插入缓存表，以备重新入库
            //insertMsgCacheProcess(row,failedtxt,MsgCacheBean.OPERATION_TYPE_INUP) ;
        }
    }
    public void delete(IRow row) {
        int i = 0;
        String failedtxt = "0条记录受到影响";
        try {
            i = deleteProcess(row);
        } catch (SQLException e) {
            // e.printStackTrace();
            i = 0;
            failedtxt = e.getMessage();

        }

        if (i == 0) {
            flag=false;
            //入库失败插入缓存表，以备重新入库
            //insertMsgCacheProcess(row,failedtxt,MsgCacheBean.OPERATION_TYPE_INUP) ;
        }
    }
}
