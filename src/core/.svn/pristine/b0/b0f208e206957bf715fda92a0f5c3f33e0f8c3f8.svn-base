package org.jdataex.flow.component.step.trigger;


import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by wengxf on 14-4-23.
 * 触发器处理
 */
public class TriggerComponent {
    private List<String> serviceList = new ArrayList<>();
    private List<TriggerDataBean> triggerDataBeanList = new ArrayList<>();  //映射关系列表
    private List<String> table = new ArrayList<>();
    private int threadnum;
    private int initthreadnum;
    private String path;
    private String datatype;

    public TriggerComponent(String path, int threadnum, int initthreadnum, String datatype) {
        this.path = path;
        this.threadnum = threadnum;
        this.initthreadnum = initthreadnum;
        this.datatype = datatype;
    }

    public boolean fileMove(String source, String dest) {
        File oldfile = new File(source);
        File newfile = new File(dest);
        return oldfile.renameTo(newfile);

    }


    /**
     * 删除单个文件
     *
     * @param sPath 被删除文件的文件名
     * @return 单个文件删除成功返回true，否则返回false
     */
    public boolean deleteFile(String sPath) {
        boolean flag = false;
        File file = new File(sPath);
        // 路径为文件且不为空则进行删除
        if (file.isFile() && file.exists()) {

            flag =  file.delete();
        }
        return flag;
    }

   /* * @param sPath 被删除目录的文件路径 *//**
     * 删除目录（文件夹）以及目录下的文件
     *

     * @return 目录删除成功返回true，否则返回false
     *//*
    public boolean deleteDirectory(String sPath) {
        //如果sPath不以文件分隔符结尾，自动添加文件分隔符
        if (!sPath.endsWith(File.separator)) {
            sPath = sPath + File.separator;
        }
        File dirFile = new File(sPath);
        //如果dir对应的文件不存在，或者不是一个目录，则退出
        if (!dirFile.exists() || !dirFile.isDirectory()) {
            return false;
        }
        boolean flag = true;
        //删除文件夹下的所有文件(包括子目录)
        File[] files = dirFile.listFiles();
        for (int i = 0; i < files.length; i++) {
            //删除子文件
            if (files[i].isFile()) {
                flag = deleteFile(files[i].getAbsolutePath());
                if (!flag) break;
            } //删除子目录
            else {
                flag = deleteDirectory(files[i].getAbsolutePath());
                if (!flag) break;
            }
        }
        if (!flag) return false;
        //删除当前目录
        return dirFile.delete();
    }*/

   /* public boolean DeleteFolder(String sPath) {
       // boolean flag = false;
        File file = new File(sPath);
        // 判断目录或文件是否存在
        if (!file.exists()) {  // 不存在返回 false
            return false;
        } else {
            // 判断是否为文件
            if (file.isFile()) {  // 为文件时调用删除文件方法
                return deleteFile(sPath);
            } else {  // 为目录时调用删除目录方法
                return deleteDirectory(sPath);
            }
        }
    }*/

    public void configHandler() {
        String currentconfig = path + "/currentconfig/current.xls";
        String createconfig = path + "/updateconfig/create.xls";
        String updateconfig = path + "/updateconfig/update.xls";
        String deleteconfig = path + "/updateconfig/delete.xls";
        boolean flag = new File(currentconfig).exists(); //判断当前配置文件是否存在，已存在说明已有库表建立，反之则是初始
        //初始化
        if (!flag && new File(createconfig).exists()) {
//            String sql1 = "create table Tr_Trigger(MsgServiceName varchar(255),MsgTableName varchar(255),MsgTriggerName varchar(255));";
//            DBOperation dbOperation = new DBOperation();
//            dbOperation.sqlExecute(sql1);
           /* for (int i = 0; i < threadnum; i++) {
                String sql = "create table Tr_Msg" + i + " (MsgServiceName varchar(255), MsgSourceTableName varchar(255),MsgInsertAt datetime, MsgAction varchar(10),MsgParam1 varchar(255),MsgParam2 varchar(255), MsgParam3 varchar(255) ,MsgParam4 varchar(255) ,MsgParam5 varchar(255),MsgId numeric(32) Identity)";
                dbOperation.sqlExecute(sql);
            }*/

            ExcelConfigLoad load = new ExcelConfigLoad(serviceList, triggerDataBeanList, table);
            load.loadConfig(createconfig);//加载配置关系
            triggerDataBeanList = load.getTriggerDataBeanList();
            serviceList = load.getServiceList();
            table = load.getTable();
            //System.out.println("***" + triggerDataBeanList.get(0).getService());
            ThreadHandler threadHandler = new ThreadHandler(datatype);
            threadHandler.triggerThread(threadnum, triggerDataBeanList, serviceList);
            fileMove(createconfig, currentconfig);  //移动文件到当前配置目录

        }
        //修改
        if (flag && new File(updateconfig).exists()) {
            ExcelConfigLoad load = new ExcelConfigLoad();
            load.loadConfig(updateconfig);
            triggerDataBeanList = load.getTriggerDataBeanList();
            serviceList = load.getServiceList();
            table = load.getTable();
            /*如何处理，数据库重新处理还是改*/
            load.updateConfig(currentconfig, updateconfig);
            deleteFile(updateconfig);
            for (int i = 0; i < triggerDataBeanList.size(); i++) {
                if (datatype.equalsIgnoreCase("sybase")) {
                    TriggerSqlHandler_sybase triggerSqlHandler = new TriggerSqlHandler_sybase();
                    triggerDataBeanList.get(i).setPrimarykey();
                    String[] primarykeys = triggerDataBeanList.get(i).getPrimarykey().toArray(new String[ triggerDataBeanList.get(i).getPrimarykey().size()]);
                    if (primarykeys.length>0) {
                        triggerSqlHandler.updateTrigger(triggerDataBeanList.get(i).getTablename(), triggerDataBeanList.get(i).getService(), triggerDataBeanList.get(i).getService(),  primarykeys);
                    }
                } else {
                    TriggerSqlHandler triggerSqlHandler = new TriggerSqlHandler();
                    triggerDataBeanList.get(i).setPrimarykey();
                    String[] primarykeys =  triggerDataBeanList.get(i).getPrimarykey().toArray(new String[triggerDataBeanList.get(i).getPrimarykey().size()]);
                    if (primarykeys.length>0) {
                        triggerSqlHandler.updateTrigger(triggerDataBeanList.get(i).getTablename(), triggerDataBeanList.get(i).getService(), triggerDataBeanList.get(i).getService(), primarykeys);
                    }
                }
            }
        }
        //删除
        if (flag && new File(deleteconfig).exists()) {
            ExcelConfigLoad load = new ExcelConfigLoad();
            load.loadConfig(deleteconfig);
            triggerDataBeanList = load.getTriggerDataBeanList();
            serviceList = load.getServiceList();
            table = load.getTable();
            load.deleteConfig(currentconfig, deleteconfig);
            deleteFile(deleteconfig);


            for (int i = 0; i < triggerDataBeanList.size(); i++) {
                if (datatype.equalsIgnoreCase("sybase")) {
                    TriggerSqlHandler_sybase triggerSqlHandler = new TriggerSqlHandler_sybase();
                    String trigger = triggerDataBeanList.get(i).getService();
                    String action = triggerDataBeanList.get(i).getAction();
                    if (action.equals("1") || action.equals("0") || action.equals("4")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_insert", table.get(i));
                    }
                    if (action.equals("2") || action.equals("0") || action.equals("4")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_update", table.get(i));
                    }
                    if (action.equals("3") || action.equals("0")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_delete", table.get(i));
                    }
                } else {
                    TriggerSqlHandler triggerSqlHandler = new TriggerSqlHandler();
                    String trigger = triggerDataBeanList.get(i).getService();
                    String action = triggerDataBeanList.get(i).getAction();
                    if (action.equals("1") || action.equals("0") || action.equals("4")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_insert", table.get(i));
                    }
                    if (action.equals("2") || action.equals("0") || action.equals("4")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_update", table.get(i));
                    }
                    if (action.equals("3") || action.equals("0")) {
                        triggerSqlHandler.triggerDeleteSql(trigger + "_delete", table.get(i));
                    }
                }
            }
        }
        //添加
        if (flag && new File(createconfig).exists()) {
            ExcelConfigLoad load = new ExcelConfigLoad();
            load.loadConfig(createconfig);
            triggerDataBeanList = load.getTriggerDataBeanList();
            serviceList = load.getServiceList();
            table = load.getTable();
            load.createConfig(currentconfig, createconfig);
            deleteFile(createconfig);
            ThreadHandler threadHandler = new ThreadHandler(datatype);
            threadHandler.triggerThread(threadnum, triggerDataBeanList, serviceList);
        }
    }

    public void dataHandler() {
        ThreadHandler threadHandler = new ThreadHandler(datatype);
        threadHandler.dataThread(threadnum, initthreadnum);
    }
}
