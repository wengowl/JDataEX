package org.jdataex.flow.component.step.xml;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.jdataex.flow.row.Column;
import org.jdataex.flow.row.IColumn;
import org.jdataex.flow.row.IRow;
import org.jdataex.flow.row.Row;
import org.jdataex.flow.row.RowSet;
import org.jdataex.util.CommonUtil;

/**
 * 读取特定的xml文件转换为流程数据对象的相关方法
 * 
 * @author zhourh
 */
public class XMLConverter {

	/*用于临时存储标识、和标识名*/
	private String idValue="";
	private String idName="";
	
	/**
	 * 根据固定格式的XML文件转换为流程数据对象
	 * @param file 文件路径
	 * @return 返回创建的数据对象 RowSet
	 * @throws DocumentException
	 * @Description 
	 * 1、解析逻辑:一个XML就是一个Row，Row是root节点,root下一级是Column，Column的值可能是Row、
	 * RowSet、普通String
	 * ，Row的值就是RowSet。 每个子节点是一个Row，每个Row下面有两种情况
	 * a、如果子节点下面没有R，则每个Row下面的子节点认为是Colunm
	 * b、如果子节点下面有R，则认为每个R是一个Row，多个Row组成RowSet，而上节Row节点包括数据是RowSet
	 * 按照上逻辑重复解析
	 */
	public Row toRow(File file) throws DocumentException {
		/*加载XML配置文件 */
		SAXReader xmlReader = new SAXReader();
		Document document = null;
		document = xmlReader.read(file);
		/*构建Row结构 */
		Row row = new Row();
		Element rootElement = document.getRootElement();
		row.getHeader().put("root", rootElement.getName());
		
		/*获取root节点属性全部放到header中*/
		Iterator<Attribute> rootAttribute = rootElement.attributeIterator();
		while(rootAttribute.hasNext()){
			Attribute attr = rootAttribute.next();
			/*为了通用和生成XML时不好区分属性，每个属性都带上attr用于区分是否是元素的属性*/
			System.out.println(attr.getName()+"          "+attr.getValue());
			row.getHeader().put(attr.getName(),attr.getValue());
		}
		
		/*封装root子节点到Column中*/
		Iterator<Element> childElement = rootElement.elementIterator();
		while (childElement.hasNext()) {
			Element rowElement = childElement.next();
			/* 迭代 column */
			IColumn column = toColumn(rowElement);
			/*写标识到每个Row里面*/
			Object obj = column.getValue();
			if(obj instanceof String && !"".equals(obj)){
				idValue = obj.toString();
				idName = column.getName();
				continue;
			}
			row.putColumn(column);
		}
		return row;
	}

	/**
	 * 解析每个叶子节点直到不能在解析为止
	 * @param element
	 * @return
	 */
	private IColumn toColumn(Element element) {
		Iterator<Element> childElement = element.elementIterator();
		/**
		 * 根据当前节点是否包含下级节点判断后续操作
		 * 1、下级节点数为0，则按column处理
		 * 2、下级节点数为1，则按照Row处理
		 * 3、下级节点数为大于1，按照RowSet处理
		 */
		switch (element.elements().size()) {
		case 0:
			return new Column(element.getName(), element.getData());
		default:
			element.getPath().indexOf("R");
			RowSet rs = new RowSet();
			while (childElement.hasNext()){
				Element el = childElement.next();
				if("R".equals(el.getName())){
					rs.putRow(createRow(el));
				}else{
					return new Column(element.getName(),createRow(element));
				}
			}
			return new Column(element.getName(), rs);
		}
	}
	
	/**
	 * 根据传入的节点解析成Row结构
	 * @param element
	 * @return
	 */
	private IRow createRow(Element element) {
		IRow row = new Row();
        /*把缺的ID字段补充进来*/
        IColumn idColumn = new Column(idName,idValue);
        row.putColumn(idColumn);
		Iterator<Element> childElement = element.elementIterator();
		while (childElement.hasNext()) {
			row.putColumn(toColumn(childElement.next()));
		}

		/*设置tableName*/
		row.getHeader().put("tableName", element.getName());
		return row;
	}

	/**
	 * 根据流程数据对象生成XML配置文件
	 * @param row
	 * @throws IOException 
	 */
	public void fromRow(IRow row,File targetFile) throws IOException {
		/* 生成Document对象 */
		Document document = DocumentHelper.createDocument();
		Element rootElement = document.addElement(row.getHeader().get("root"));
		rootElement.addAttribute("actionType",row.getHeader().get("actionType"));
		for (int i = 0; i < row.getColumnsSize(); i++) {
			createXMLByColumn(rootElement,row.getColumn(i));
		}

		XMLWriter writer = new XMLWriter(new FileWriter(targetFile), OutputFormat.createPrettyPrint());
		writer.write(document);
		writer.close();
	}

	/**
	 * 
	 * @param rootElement
	 * @param column
	 */
	private void createXMLByColumn(Element root, IColumn column) {
		Object obj = column.getValue();
		if(obj instanceof Row){
			Row row = (Row)obj;
			Element child_column = root.addElement(column.getName());
			for(int i=0;i<row.getColumnsSize();i++){
				createXMLByColumn(child_column,row.getColumn(i));
			}
		}else if(obj instanceof RowSet){
			Element child_column = root.addElement(column.getName());
			RowSet rowSet =(RowSet)obj;
			while(rowSet.hasNextRow()){
				IRow row = rowSet.nextRow();
				Element childRow = child_column.addElement("R");
				for(int i=0;i<row.getColumnsSize();i++){
					createXMLByColumn(childRow,row.getColumn(i));
				}
			}
		}else{
			Element child = root.addElement(column.getName());
			if(!CommonUtil.isNullValue(obj)){
				child.setText((String)obj);
			}
		}
	}
	public static void main(String[] args) throws Exception {
		XMLConverter converter = new XMLConverter();
		Row row = converter.toRow(new File("C:/Users/zhourh/Desktop/22_185000000197838.xml"));
		converter.fromRow(row, new File("d:/ts.xml"));
	}
}
