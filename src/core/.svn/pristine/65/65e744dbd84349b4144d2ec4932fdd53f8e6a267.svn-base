package org.jdataex.channel.local;

import org.jdataex.channel.BaseAbstractChannelOutput;
import org.jdataex.channel.IChannelOutput;
import org.jdataex.channel.IChannelStage;
import org.jdataex.channel.common.ChannelEventType;
import org.jdataex.channel.event.DefaultEvent;
import org.jdataex.channel.event.IEvent;
import org.jdataex.channel.exception.BaseNestedException;
import org.jdataex.channel.executor.ExecutorTask;
import org.jdataex.channel.future.IChannelFuture;
import org.jdataex.channel.naming.LocalNamingContext;
import org.jdataex.channel.net.INetAddress;
import org.jdataex.channel.util.ChannelClassUtil;
import org.jdataex.util.AssertUtil;

/**
 * 本地output类型,本地output的特点是write方法直接写入目标端executor,connect方法通过
 * JNDI直接获取目标本地stage对象,注意本地output的下一级只能是包含本地input的stage.
 * 
 * 2014-6-4 修改代码将chain移出类,解耦合,chain处理代码移动到stage内部
 * 
 * @author chaos
 * 
 * @param <T>
 *            消息可以为任意类型
 */
public class LocalChannelOutput<T> extends BaseAbstractChannelOutput<T> implements IChannelOutput<T> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 9026219013055268401L;
	
	
	private IChannelStage<T> targetStage;

	public LocalChannelOutput(String name) {
		super(name);
	}

	public IChannelStage<T> getTargetStage() {
		return targetStage;
	}

	public void setTargetStage(IChannelStage<T> targetStage) {
		this.targetStage = targetStage;
	}

	/**
	 * localOuput直接通过targetStage获取目标端的stage并写入数据
	 */
	@SuppressWarnings("unchecked")
	@Override
	public IChannelFuture<T> writeAndFlush(IEvent<T> event) {
		AssertUtil.assertNull(targetStage);
		if (this.canWrite()) {
			if(targetStage==null||!targetStage.isAlive()){
				reConnect();
			}
			return targetStage.getInputExecutor().execute(
					new ExecutorTask<T>(targetStage.getHandlerChain(),
							new DefaultEvent<T>(event.getMsg(), null,
									ChannelEventType.ChannelRead, event.getStringProps()),
							targetStage.getContext()));
		} else {
			return (IChannelFuture<T>) ChannelClassUtil
					.getInstance(ChannelClassUtil.CAN_NOT_WRITE_CHANNEL_FUTURE);
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public IChannelFuture<T> connect(INetAddress localAddress) {
		AssertUtil.assertNull(localAddress);
		AssertUtil.assertNull(localAddress.getHostName());
		setAddress(localAddress);
		targetStage = (IChannelStage<T>) LocalNamingContext.getInstance()
				.lookUp(getAddress().getHostName());
		if (targetStage != null) {
			// 默认重试10次看目标stage是否处于活动状态
			for (int i = 0; i < getTimes(); i++) {
				getLogger().debug("try to connect target stage!");
				if (targetStage.isAlive()) {
					return getStage().writeEvent(new DefaultEvent<T>(null, null,
							ChannelEventType.channelActive, "location=local"), this.getName())[0];				}
				try {
					Thread.sleep(getInterval());
				} catch (InterruptedException e) {
				}
			}
		}
		throw new BaseNestedException("target Stage is null...");
	}
	
	public void reConnect(){
		connect(getAddress());
	}

	@SuppressWarnings("unchecked")
	@Override
	public IChannelFuture<T> disConnect() {
		targetStage = null;
		return (IChannelFuture<T>) ChannelClassUtil
				.getInstance(ChannelClassUtil.TRUE_CHANNEL_FUTURE);
	}
}
