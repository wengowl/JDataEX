package org.jdataex.flow.component.trigger;

import org.jdataex.resource.pool.BasePoolConnection;
import org.jdataex.resource.pool.DBManager;

import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by wengxf on 14-4-24.
 * 数据库常用操作封装
 */
public class DBOperation {
    public int sqlUpdate(String sql, Object[] param, int[] type) {
        int rows = 0;
        BasePoolConnection conn = DBManager.getConnection();
        PreparedStatement prsts = null;
        try {
            prsts = conn.prepareStatement(sql);
            for (int i = 1; i <= param.length; i++) {
                prsts.setObject(i, param[i - 1], type[i - 1]);
            }
            rows = prsts.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            conn.close();

        }
        return rows;
    }
    public int sqlStringUpdate(String sql, String[] param) {
        int rows = 0;
        BasePoolConnection conn = DBManager.getConnection();
        PreparedStatement prsts = null;
        try {
            prsts = conn.prepareStatement(sql);
            for (int i = 1; i <= param.length; i++) {
                prsts.setString(i, param[i - 1]);
            }
            rows = prsts.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            conn.close();

        }
        return rows;
    }

    public boolean sqlExecute(String sql) {
        BasePoolConnection conn = DBManager.getConnection();
        boolean flag = true;
        try {
            flag = conn.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }finally{
            conn.close();
        }

        return flag;
    }

    /**
     * 执行查询SQL语句
     *
     * @param sql   sql语句
     * @param param 值集
     * @param type  值类型集
     * @return 结果集
     */
    public List sqlQuery(String sql, Object[] param, int[] type) {
        ResultSet rs = null;
        List list = null;
        BasePoolConnection conn = DBManager.getConnection();
        PreparedStatement prsts = null;
        try {
            prsts = conn.prepareStatement(sql);
            for (int i = 1; i <= param.length; i++) {
                prsts.setObject(i, param[i - 1], type[i - 1]);
            }
            rs = prsts.executeQuery();
            list = new ArrayList();
            ResultSetMetaData rsm = rs.getMetaData();
            Map map = null;
            while (rs.next()) {
                map = new HashMap();
                for (int i = 1; i <= rsm.getColumnCount(); i++) {
                    map.put(rsm.getColumnName(i), rs.getObject(rsm.getColumnName(i)));
                }
                list.add(map);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            conn.close();
        }
        return list;
    }

    public ResultSet sqlQuery(String sql) {
        BasePoolConnection conn = DBManager.getConnection();
        ResultSet rs = null;
        try {
            rs = conn.executeQuery(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            conn.close();
        }
        return rs;
    }

    public String[] getTablePK(String table) {
        BasePoolConnection conn = DBManager.getConnection();
        ResultSet resultSet = null;
        String[] result = null;
        String tempPK = new String();
        try {
            DatabaseMetaData dbmd = conn.getMetaData();
            resultSet = dbmd.getPrimaryKeys(null, null, table);
            while (resultSet.next()) {
                tempPK = resultSet.getString("COLUMN_NAME") + ",";
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            conn.close();
        }
        result = tempPK.split(",");
        if (tempPK.length() < 1)
            result = null;

        return result;
    }


}
