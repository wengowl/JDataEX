package org.jdataex.channel;

import org.jdataex.channel.event.IEvent;
import org.jdataex.channel.event.IListener;
import org.jdataex.channel.executor.IExecutor;
import org.jdataex.channel.future.IChannelFuture;
import org.jdataex.channel.handler.IHandler;
import org.jdataex.channel.handler.IHandlerChain;
import org.jdataex.channel.handler.ISystemHandler;
import org.jdataex.channel.metadata.Metadata;

/**
 * channel框架主类，控制channel，excuter，handler的创建
 * 和实例化,对外数据写入也通过channelStage完成.
 * 操作模式说明,数据写入没什么好说的,直接调用writemsg方法.
 * 如果是数据读取和处理有内部的channelContainer,executer和handler完成
 * @author chaos
 *
 */
public interface IChannelStage<T>{
	
	/**
	 * 得到注册的线程池
	 * @return
	 */
	public IExecutor<T> getExecutor();
	
	/**
	 * 返回上下文
	 * @return
	 */
	public IStageContext<T> getContext();
	
	/**
	 * 
	 * @return
	 */
	public IChannelContainer<T> getChannelContainer();
	
	/**
	 * 
	 * @return
	 */
	public IHandlerChain<T> getHandlerChain();
	
	/**
	 * 根据配置metaData创建stage并启动
	 * @param config
	 * @return
	 */
	public abstract IChannelStage<T> startWithConfig(String configFile);
	
	/**
	 * 返回metaData
	 * @return
	 */
	public abstract Metadata getMetadata();
	
	/**
	 * 设置通道框架的channel。
	 * @param channel
	 * @return
	 */
	public abstract IChannelStage<T> setChannelContainer(IChannelContainer<T> channel);
	
	/**
	 * 添加系统handler,在业务handler处理之前<br>
	 * 最常见的比如消息转码,压缩统计等等
	 * @param {@link IHandler}
	 * @return
	 */
	public abstract IChannelStage<T> addBefare(ISystemHandler handler); 
	
	/**
	 * 添加系统handler,在业务handler处理之后<br>
	 * 最常见的比如消息转码,压缩统计等等
	 * @param handler
	 * @return
	 */
	public abstract IChannelStage<T> addAfter(ISystemHandler handler);
	
	/**
	 * 添加业务handler
	 * @param handler
	 * @return
	 */
	public abstract IChannelStage<T> addHandler(IHandler handler);
	
	/**
	 * 设置channel input和output的处理线程池
	 * @param input  {@link IExecutor}
	 * @param output {@link IExecutor}
	 * @return
	 */
	public abstract IChannelStage<T> setExecutor(IExecutor<T> executor);
	
	/**
	 * 启动stage,一般非metaData方式加载,需要独立启动的时候需要调用此方法
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> start();
	
	/**
	 * 关闭所有channel以及线程池,直接退出,不可恢复,阻塞方法
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownAll();
	
	/**
	 * 关闭channelInput 以及 input线程池,阻塞方法
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownAllInput();
	
	/**
	 * 关闭channelOutput 以及 output线程池,阻塞方法
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownAllOutput();
	
	
	/**
	 * 关闭channelinput 以及 input线程池 等待指定的时间如果还没不能处理完毕
	 * 就返回错误 {@link IChannelFuture}
	 * @param timeMils
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownInput(long timeMils);
	
	/**
	 * 关闭channeloutput 以及 output线程池 等待指定的时间如果还没不能处理完毕
	 * 就返回错误 {@link IChannelFuture}
	 * @param timeMils
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownOutput(long timeMils);
	
	/**
	 * 关闭所有channel以及线程池,直接退出,不可恢复,等待指定的时间如果还没不能处理完毕
	 * 就返回错误 {@link IChannelFuture}
	 * @param timeMils
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> shutdownAll(long timeMils);
	
//___________________________________________________________________________________
//|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||	
	/**
	 * 将数据写入channel,系统将不会独立开放channel对象用于数据写入.写入操作都必须
	 * 通过channelStage完成.
	 * @param event  
	 * @param channelOutputName 如果有多个接收端(channelOutput),可以指定需要写入的
	 * 接收端,如果只有一个接收端,可以写null
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> writeEvent(IEvent<T> event,String... channelOutputName);
	
	/**
	 * 
	 * 将数据写入channel,系统将不会独立开放channel对象用于数据写入.写入操作都必须
	 * 通过channelStage完成.
	 * @param IRowSet  
	 * @param channelOutputName 如果有多个接收端(channelOutput),可以指定需要写入的
	 * 接收端,如果只有一个接收端,可以写null
	 * @return {@link IChannelFuture}
	 */
	public abstract IChannelFuture<T> writeMsg(T msg,String... channelOutputName);
	
	/**
	 * 添加监听器
	 * @param listener
	 */
	public abstract void addListener(IListener listener);
	
	/**
	 * 解除监听器
	 * @param listener
	 */
	public abstract void removeListener(IListener listener);
}
