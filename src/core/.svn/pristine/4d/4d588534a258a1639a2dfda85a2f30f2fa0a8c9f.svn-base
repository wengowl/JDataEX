package org.jdataex.engine.loader;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.dom4j.DocumentException;
import org.jdataex.core.InitializationException;
import org.jdataex.core.card.GUIC;
import org.jdataex.engine.config.ComponentItem;
import org.jdataex.engine.config.ControllerItem;
import org.jdataex.engine.config.FlowConfig;
import org.jdataex.engine.config.StationItem;
import org.jdataex.flow.Flow;
import org.jdataex.flow.IFlow;
import org.jdataex.flow.component.IComponent;
import org.jdataex.flow.component.step.IStep;
import org.jdataex.flow.controller.ComponentController;
import org.jdataex.flow.controller.IComponentController;
import org.jdataex.flow.handler.IComponentHandler;
import org.jdataex.flow.handler.StepHandler;
import org.jdataex.flow.station.IStation;
import org.jdataex.util.CommonUtil;
import org.jdataex.util.logger.ILoggable;
import org.jdataex.util.logger.LoggerFactory;

public class FlowLoader implements IFlowLoader {

	@Override
	public IFlow load(File file) throws InitializationException {
		FlowConfig fc;

		try {
			fc = new FlowConfig(file);

			return load(fc);
		} catch (IOException | DocumentException e) {
			throw new InitializationException("Flow loading error. "
					+ e.getMessage(), e);
		}

	}

	@Override
	public IFlow load(FlowConfig config) throws InitializationException {
		if (config == null) {
			return null;// TODO other handle,ex throw exception;
		}

		Map<GUIC, IComponentController> controllers = new HashMap<>();

		IComponentController controller;
		Map<String, IStation> stations;
		for (ControllerItem controllerItem : config.getControllers().values()) {

			stations = loadStations(controllerItem.getStations());

			controller = loadController(controllerItem,
					controllerItem.getComponents(), stations);

			controllers.put(controller.getGUIC(), controller);
		}

		IFlow flow = new Flow(controllers);
		return flow;
	}

	private IComponentController loadController(ControllerItem controllerItem,
			Map<String, ComponentItem> items, Map<String, IStation> stations)
			throws InitializationException {

		IComponent component;
		IStation output;
		IStation input;

		IComponentController controller = new ComponentController(controllerItem.getId());
		for (ComponentItem item : items.values()) {

			if (item != null && CommonUtil.isNotBlank(item.getClazz())) {
				try {
					component = (IComponent) ClassLoader.getSystemClassLoader()
							.loadClass(item.getClazz()).newInstance();
					
					// TODO 以后修改成，动态加载不同的logger。而不是现在这有通用一个logger。
					((ILoggable) component).setLogger(LoggerFactory
							.getDefaultLogger());
					
					component.initConfig(item);

					output = stations.get(item.getOutputStationRefItem()
							.getId());
					input = stations.get(item.getInputStationRefItem().getId());

					if (output == null) {
						throw new InitializationException(
								"Output station is null. Station ID is "
										+ item.getOutputStationRefItem()
												.getId());
					}

					if (input == null) {
						throw new InitializationException(
								"Input station is null. Station ID is "
										+ item.getInputStationRefItem().getId());
					}

					IComponentHandler handler = new StepHandler(
							(IStep) component, input, output);
					
					// TODO 以后修改成，动态加载不同的logger。而不是现在这有通用一个logger。
					((ILoggable) handler).setLogger(LoggerFactory
							.getDefaultLogger());

					controller.addComponentHanlder(handler);
				} catch (InstantiationException | IllegalAccessException
						| ClassNotFoundException e) {
					throw new InitializationException("Initialization station "
							+ e.getMessage(), e);
				}
			}

		}

		return controller;
	}

	private Map<String, IStation> loadStations(Map<String, StationItem> items)
			throws InitializationException {
		Map<String, IStation> stations = new HashMap<>();
		StationItem item;
		IStation st;
		for (String key : items.keySet()) {
			item = items.get(key);

			if (item != null && CommonUtil.isNotBlank(item.getClazz())) {
				try {
					st = (IStation) ClassLoader.getSystemClassLoader()
							.loadClass(item.getClazz()).newInstance();

					stations.put(key, st);
				} catch (InstantiationException | IllegalAccessException
						| ClassNotFoundException e) {
					throw new InitializationException("Initialization station "
							+ e.getMessage(), e);
				}
			}

		}

		return stations;
	}

}
