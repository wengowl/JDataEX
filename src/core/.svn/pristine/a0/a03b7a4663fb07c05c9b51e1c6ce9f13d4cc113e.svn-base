package org.jdataex.channel;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import junit.framework.Assert;

import org.jdataex.channel.executor.DefaultExecutor;
import org.jdataex.channel.future.IChannelFuture;
import org.jdataex.channel.local.LocalChannelInput;
import org.jdataex.channel.local.LocalChannelOutput;
import org.jdataex.channel.mock.MockHandler;
import org.jdataex.channel.mock.MockSystemHandler;
import org.jdataex.channel.net.INetAddress;
import org.jdataex.channel.net.NetAddress;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class DefaultChannelStageTest {

	IChannelStage<String> stage1;

	IChannelStage<String> stage2;

	@Before
	public void setUp() {

		stage1 = createStage("stage1", 1, 1000);

		stage2 = createStageNoOutput("stage2", 1000);

		Map<String, INetAddress> map = new HashMap<String, INetAddress>();
		map.put("testout", new NetAddress("stage2",0));

		// 本地input不用address,如果没有output也不需要加address
		stage2.start(null, null);
		stage1.start(null, map);
	}

	private IChannelStage<String> createStage(String name, int inputExeNumber,
			int outputExeNumber) {
		return createStage(name, inputExeNumber, outputExeNumber, "test",
				"testout");
	}

	private IChannelStage<String> createStageNoOutput(String name,
			int inputExeNumber) {
		return this.createStage(name, inputExeNumber, 0);
	}

	private IChannelStage<String> createStage(String name, int inputExeNumber,
			int outputExeNumber, String inputName, String outputName) {
		IChannelStage<String> stage = new DefaultChannelStage<String>(name);
		IChannelContainer<String> cr = new DefaultChannelContainer<String>();
		if (outputExeNumber == 0) {
			outputExeNumber = 1;
		} else {
			IChannelOutput<String> out = new LocalChannelOutput<String>(
					outputName);
			out.setReConnectTimes(5, 1000);
			cr.addOutput(out);
		}
		cr.setInput(new LocalChannelInput<String>(inputName));
		stage.setChannelContainer(cr);
		stage.setExecutor(new DefaultExecutor<String>(inputExeNumber),
				new DefaultExecutor<String>(outputExeNumber));
		stage.addBefare(new MockHandler<String>());
		stage.addAfter(new MockSystemHandler<String>());
		return stage;
	}

	@After
	public void clear() {
		stage1.shutdown();
		stage2.shutdown();
	}

	 @Test
	public void testWrite() {
		IChannelFuture<String>[] ic = stage1.writeMsg("[[[this is a test msg",
				"testout");
		Assert.assertEquals(ic[0].isSuccess(), true);
	}

	 @Test
	public void testWriteSome() {
		for (int i = 0; i < 10000; i++) {
			stage1.writeMsg("[[[this is a test msg", "testout");
		}
	}

	 @Test
	public void testBadWriteMsg() {
		IChannelFuture<String>[] ic = stage1.writeMsg(
				"error this is a bad write msg", "testout");
		Assert.assertEquals(ic[0].isSuccess(), false);
		// ic[0].error().printStackTrace();
		System.out.println(ic[0].error().getMessage());
	}

	 @Test
	public void testBadReadMsg() {
		IChannelFuture<String>[] ic = stage1.writeMsg("this is a badread msg",
				"testout");
		Assert.assertEquals(ic[0].isSuccess(), false);
		System.out.println(ic[0].error().getMessage());
	}

	@Test
	public void testStage2shutdown() {
		stage2.shutdown();
		IChannelFuture<String> ic2 = stage1.writeMsg("this is a  msg",
				"testout")[0];
		Assert.assertEquals(ic2.isSuccess(), false);
		ic2.error().printStackTrace();
		System.out.println(ic2.error().getMessage());
	}

	@Test
	public void testStage2ShutdownAndStart() {
		stage2.shutdown();
		System.out.println("shutdown 后再启动!");
		stage2 = createStageNoOutput("stage2", 100);
		stage2.start(null, null);

		IChannelFuture<String> ic2 = stage1.writeMsg("this is a qqq  msg",
				"testout")[0];
		Assert.assertEquals(ic2.isSuccess(), true);
	}

	/**
	 * 测试配置错误的address时的情况,正确的方式应该是直接抛出异常告知无法获取地址
	 */
	@Test
	public void testBadOutputWriteName() {
		stage1 = createStage("stage1", 1, 100, "test1", "output111");
		Map<String, INetAddress> map = new HashMap<String, INetAddress>();
		map.put("output111", new NetAddress("stage2",0));
		stage1.start(null, map);

		IChannelFuture<String>[] ic = stage1.writeMsg("[[[this is a test msg",
				"testout");
		Assert.assertEquals(ic[0].isSuccess(), false);
	}

	/**
	 * 
	 */
	@Test
	public void testBadOutputAddress() {
		stage1 = createStage("stage1", 1, 100, "test1", "output111");
		Map<String, INetAddress> map = new HashMap<String, INetAddress>();
		map.put("output", new NetAddress("stage2",0));
		try {
			stage1.start(null, map);
		} catch (Exception e) {
			e.printStackTrace();
			Assert.assertTrue(true);
		}
	}
	
//#********************************************************************************#
//#********************************************************************************#
//# 	                                                                           #
//#                                                                                #
//#                                                                                #
//#                                                                                #
//#                                                                                #
//#********************************************************************************#
//#********************************************************************************#	
	public static void main(String[] args) {
		// testList();
		// testStage();
		// testClose();
		DefaultChannelStageTest tt = new DefaultChannelStageTest();
		tt.setUp();
		// tt.testWriteSome();
		// tt.testWrite();
		tt.testStage2shutdown();
		// tt.testWrite();

		tt.clear();
	}

	@SuppressWarnings({ "unused", "unchecked" })
	private static void testList() {
		long start = System.currentTimeMillis();
		@SuppressWarnings("rawtypes")
		List list = new ArrayList();
		for (int i = 0; i < 50000; i++) {
			// System.out.println("stage2 sys channelRead...[[[this is a test msg");
			// System.out.println("stage2 channelRead...[[[this is a test msg");
			list.add("stage2 channelRead...[[[this is a test msg");
		}

		System.out.println("用时:   " + (System.currentTimeMillis() - start));
	}

	public static void testStage() {
		long start = System.currentTimeMillis();

		DefaultChannelStageTest t = new DefaultChannelStageTest();
		t.setUp();
		t.testWriteSome();
		t.clear();
		System.out.println("用时:   " + (System.currentTimeMillis() - start));
	}

	public static void testClose() {
		long start = System.currentTimeMillis();
		DefaultChannelStageTest t = new DefaultChannelStageTest();
		t.setUp();
		t.clear();
		System.out.println("用时:   " + (System.currentTimeMillis() - start));
	}

}
