package org.jdataex.flow.component.trigger;


import org.jdataex.flow.component.DBOperation;
import org.jdataex.util.logger.LoggerFactory;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by wengxf on 14-4-23.
 * trigger sql
 */
public class TriggerSqlHandler {

    public void triggerCreateOrReplaceSql(String tablename, String triggername, String action, String middletable, String[] primarykey) {
        //  action = Integer.parseInt(action)+"";
        String msgparam = "MsgParam";
        String newprimarykeyparam = "new." + primarykey[0];
        String oldprimarykeyparam = "old." + primarykey[0];
        DBOperation dbOperation = new DBOperation();
        for (int i = 1; i < primarykey.length; i++) {
            msgparam = msgparam + ",MsgParam" + i;
            oldprimarykeyparam = oldprimarykeyparam + ",old." + primarykey[i];

        }
        if (action.equals("1.0") || action.equals("0.0") || action.equals("4.0")) {
            String sql = "create or replace Trigger " + triggername + "_insert" + " after insert  on " + tablename + " for each row begin  insert into " + middletable + " (MsgServiceName, MsgSourceTableName,MsgAction," + msgparam + ") values(" + triggername + "," + tablename +
                    "  ,insert," + newprimarykeyparam + ") end;";
            // String  sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( \"" + triggername + "\", \"" + tablename + "\", \"" + triggername + "_insert\", \""+middletable+"\" )";
            String sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( ?,?,?,? )";
            String[] param = new String[4];
            param[0] = triggername;
            param[1] = tablename;
            param[2] = triggername + "_insert";
            param[3] = middletable;
            LoggerFactory.getRootLogger().debug("创建触发器："+sql);
            LoggerFactory.getRootLogger().debug("插入触发器表："+sql1);
            dbOperation.sqlExecute(sql,null);
            dbOperation.sqlStringUpdate(sql1, param,null);
            //dbOperation.sqlExecute(sql1);
        }
        if (action.equals("2.0") || action.equals("0.0") || action.equals("4.0")) {
            String sql = "create or replace Trigger " + triggername + "_update after update  on " + tablename + " for each row begin  insert into " + middletable + " (MsgServiceName, MsgSourceTableName,MsgAction," + msgparam + ")values( " + triggername + "," + tablename +
                    "  ,update," + newprimarykeyparam + ") end;";
            //  String sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( \"" + triggername + "\", \"" + tablename + "\", \"" + triggername + "_update\", \""+middletable+"\" )";
            String sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( ?,?,?,? )";
            String[] param = new String[4];
            param[0] = triggername;
            param[1] = tablename;
            param[2] = triggername + "_update";
            param[3] = middletable;
            LoggerFactory.getRootLogger().debug("创建触发器："+sql);
            LoggerFactory.getRootLogger().debug("插入触发器表："+sql1);
            //dbOperation.sqlExecute(sql1);
            dbOperation.sqlStringUpdate(sql1, param,null);
            dbOperation.sqlExecute(sql,null);
        }
        if (action.equals("3.0") || action.equals("0.0")) {
            String sql = "create or replace Trigger " + triggername + "_delete after delete  on " + tablename + " for each row begin  insert into " + middletable + " (MsgServiceName, MsgSourceTableName,MsgAction," + msgparam + ")values(" + triggername + "," + tablename +
                    "  ,delete," + oldprimarykeyparam + ") end;";
            // String sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( \"" + triggername + "\", \"" + tablename +" \", \"" + triggername + "_delete\", \""+middletable+"\" )";
            String sql1 = "insert into Tr_Trigger ( MsgServiceName , MsgTableName , MsgTriggerName , MsgMiddleName ) values( ?,?,?,? )";
            String[] param = new String[4];
            param[0] = triggername;
            param[1] = tablename;
            param[2] = triggername + "_delete";
            param[3] = middletable;
            LoggerFactory.getRootLogger().debug("创建触发器："+sql);
            LoggerFactory.getRootLogger().debug("插入触发器表："+sql1);
            // dbOperation.sqlExecute(sql1);
            dbOperation.sqlStringUpdate(sql1, param,null);
            dbOperation.sqlExecute(sql,null);
        }


    }


    public void triggerDeleteSql(String triggername, String tablename) {
        String sql = "drop trigger " + triggername + "on" + tablename;
        DBOperation dbOperation = new DBOperation();
        dbOperation.sqlExecute(sql,null);
    }

    public void updateTrigger(String tablename, String triggername, String action, String[] primarykey) {
        String sql = "select * from Tr_Trigger where service = " + triggername;
        DBOperation dbOperation = new DBOperation();
        ResultSet rs = dbOperation.sqlQuery(sql,null);
        String middletablename = new String();
        try {
            while (rs.next()) {
                triggerDeleteSql(rs.getString("MsgTriggerName"), rs.getString("MsgTableName"));
                middletablename = rs.getString("MsgMiddleName");
            }
            triggerCreateOrReplaceSql(tablename, triggername, action, middletablename, primarykey);
            rs.close();
        } catch (SQLException e) {
           //TODO e.printStackTrace();
          //  LoggerFactory.getRootLogger().traceI18nc(TriggerSqlHandler.class,"SQLException",e);
            LoggerFactory.getRootLogger().error(e.getMessage(),e);
        }


    }

}
