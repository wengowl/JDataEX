package org.jdataex.channel.executor;

import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;

import org.jdataex.channel.IChannelContainer;
import org.jdataex.channel.common.DefaultValues;
import org.jdataex.channel.future.DefaultChannelFuture;
import org.jdataex.channel.future.IChannelFuture;
import org.jdataex.util.AssertUtil;

/**
 * 默认实现的线程池,他将包装java的ThreadPoolExecutor 本地channel和TLQ采用默认线程池
 * 
 * @author chaos
 * 
 */
public class DefaultExecutor<T> implements IExecutor<T> {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5916560941772234652L;

	private ThreadPoolExecutor tp;

	private IChannelContainer<T> channel;

	public DefaultExecutor() {
		tp = (ThreadPoolExecutor) Executors
				.newFixedThreadPool(DefaultValues.DEFAULT_THREAD_SIZE);
	}

	public DefaultExecutor(int poolSize) {
		tp = (ThreadPoolExecutor) Executors.newFixedThreadPool(poolSize);
	}

	@Override
	public long getTeskCount() {
		return tp.getTaskCount();
	}

	@Override
	public int getMaxThreadNum() {
		return 0;
	}

	@Override
	public int getCoreThreadNum() {
		return tp.getCorePoolSize();
	}

	@Override
	public int getCurrentThreadSize() {
		return tp.getPoolSize();
	}

	@Override
	public int getActiveThreadSize() {
		return tp.getActiveCount();
	}

	public IChannelFuture<T> execute(ITask<T> task) {
		tp.execute(task);
		return new DefaultChannelFuture<T>(task);
	}

	@Override
	public IChannelContainer<T> getChannel() {
		return channel;
	}

	@Override
	public void register(IChannelContainer<T> channel) {
		AssertUtil.assertNull(channel);
		this.channel = channel;
	}

	@Override
	public void shutdown() {
		tp.shutdown();
		while (true) {
			if (tp.isShutdown() && tp.isTerminated()) {
				return;
			}
		}
	}

	@Override
	public boolean isAllWorksFinish() {
		if (getActiveThreadSize() == 0) {
			return true;
		} else
			return false;
	}
}
